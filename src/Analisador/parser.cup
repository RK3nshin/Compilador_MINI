import java_cup.runtime.Symbol;

/* Define o conjunto de terminais */
terminal 
  PROGRAM, DECLARE, BEGIN, INTEGER, DECIMAL, IF, THEN, ELSE, FOR, END, DO, TO, 
  WHILE, READ, WRITE, OR, AND, MOD, NOT, IDENTIFIER, INTEGERCONSTANT, DECIMALCONSTANT,
  ASSIGN_OP, CARACTERE, COMMA, SEMICOLON, RIGHT_PAREN, LEFT_PAREN, 
  EQ, MINUS, PLUS, LT, LE, NE, GT, GE, MULT, DIV, DGT, DLT, TGT, TLT, QUESTION_MARK, COLON, BACKTICK, ACUTE_ACCENT;

/* Define o conjunto de não-terminais */
non terminal 
  Startprogram, Body, DeclList, Decl, IdentList, Type, Dlist, Commoindetifier, Semicolondecl,
  Stmtlist, Stmt, Commostmt, Assignstmt, Simpleexp, Term, 
  FactoA, Factor, Expression, Relop, Addop, Mulop, 
  Shiftop, Literal, Condition, Writable, Readstmt, 
  Writestmt, Stmtsuffix, Whilestmt, Dowhilestmt, 
  Forstmt,Ifstmt,IFComp,ConditionalExpression,Loopcomplemeto,Dostmtlist,Whilecondition;

/* Definição das precedências */
precedence right ASSIGN_OP;
precedence left DGT, DLT, TGT, TLT;
precedence left OR;
precedence left AND;
precedence left EQ, NE;
precedence left LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;


start with Startprogram;


/* Produções da gramática */
Startprogram ::= PROGRAM IDENTIFIER Body;

Body ::= Dlist BEGIN Stmtlist END;

Dlist ::= DECLARE DeclList | ;

DeclList ::= Decl Semicolondecl;

Semicolondecl ::= SEMICOLON Decl Semicolondecl | ;

Decl ::= Type IdentList;

IdentList ::= IDENTIFIER Commoindetifier;

Commoindetifier ::= COMMA IDENTIFIER Commoindetifier | ;

Type ::= INTEGER | DECIMAL;

Stmtlist ::= Stmt Commostmt;

Commostmt ::= COMMA Stmt Commostmt | ;

Stmt ::= Assignstmt 
         | Readstmt
         | Writestmt
         | Whilestmt
         | Ifstmt;


Ifstmt ::= IF Condition THEN  Stmtlist  IFComp;

IFComp ::= END
          | ELSE  Stmtlist END;

Assignstmt ::= IDENTIFIER ASSIGN_OP Simpleexp;

Forstmt ::= FOR Assignstmt TO Condition  Loopcomplemeto;

Whilestmt ::= Whilecondition Loopcomplemeto;

Dowhilestmt ::= Dostmtlist  Stmtsuffix;

Loopcomplemeto ::=   Dostmtlist END;

Dostmtlist ::= DO Stmtlist;

Stmtsuffix ::=  Whilecondition SEMICOLON;

Whilecondition ::= WHILE Condition;


Simpleexp ::= Term 
              | Simpleexp Addop Term
              | ConditionalExpression QUESTION_MARK Simpleexp COLON Simpleexp;


Factor ::= IDENTIFIER | INTEGERCONSTANT | DECIMALCONSTANT | RIGHT_PAREN Expression LEFT_PAREN | ConditionalExpression  ;

Expression ::= Simpleexp Relop Simpleexp; 


ConditionalExpression ::= RIGHT_PAREN Simpleexp LEFT_PAREN;

Readstmt ::= READ RIGHT_PAREN IDENTIFIER LEFT_PAREN SEMICOLON;

Writestmt ::= WRITE RIGHT_PAREN Writable LEFT_PAREN SEMICOLON;



Writable ::= Simpleexp | Literal;

Condition ::= Expression;

Term ::= FactoA | Term Mulop FactoA;

FactoA ::= Factor | NOT Factor | MINUS Factor;


Relop ::= EQ | GT | GE | LT | LE | NE;

Addop ::= PLUS | MINUS | OR;

Mulop ::= MULT | DIV | MOD | AND;

Shiftop ::= TLT
          | TGT
          | DLT
          | DGT;


Literal ::= BACKTICK BACKTICK CARACTERE ACUTE_ACCENT ACUTE_ACCENT 
             | BACKTICK BACKTICK IDENTIFIER CARACTERE ACUTE_ACCENT ACUTE_ACCENT 
             | BACKTICK BACKTICK CARACTERE IDENTIFIER ACUTE_ACCENT ACUTE_ACCENT
             | BACKTICK BACKTICK IDENTIFIER ACUTE_ACCENT ACUTE_ACCENT ;
