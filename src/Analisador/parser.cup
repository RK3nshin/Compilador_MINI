import java_cup.runtime.Symbol;

/* Define o conjunto de terminais */
terminal 
  PROGRAM, DECLARE, BEGIN, INTEGER, DECIMAL, IF, THEN, ELSE, FOR, END, DO, TO, 
  WHILE, READ, WRITE, OR, AND, MOD, NOT, IDENTIFIER, INTEGERCONSTANT, DECIMALCONSTANT,
  ASSIGN_OP, COMMA, SEMICOLON, RIGHT_PAREN, LEFT_PAREN, 
  EQ, MINUS, PLUS, LT, LE, NE, GT, GE, MULT, DIV, DGT, DLT, TGT, TLT, QUESTION_MARK, COLON, TEXTO;

/* Define o conjunto de não-terminais */
non terminal 
  Startprogram, Body, DeclList, Decl, IdentList, Type, Dlist, Commoindetifier, Semicolondecl,
  Stmtlist, Stmt, SemiColonstmt, Assignstmt, Simpleexpr, Term, 
  FactoA, Factor, Expression, Relop, Addop, Mulop, 
  Shiftop, Literal, Condition, Writable, Readstmt, 
  Writestmt, Stmtsuffix, Whilestmt, 
  Forstmt,Ifstmt,IFComp,ExpTail,Dowhilestmt;

/* Definição das precedências */
precedence right ASSIGN_OP;
precedence left DGT, DLT, TGT, TLT;
precedence left OR;
precedence left AND;
precedence left EQ, NE;
precedence left LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;


start with Startprogram;


/* Produções da gramática */
Startprogram ::= PROGRAM IDENTIFIER Body;

Body ::= Dlist BEGIN Stmtlist END;

Dlist ::= DECLARE DeclList | ;

DeclList ::= Decl Semicolondecl;

Semicolondecl ::= SEMICOLON Decl Semicolondecl | SEMICOLON;

Decl ::= Type IdentList;

IdentList ::= IDENTIFIER Commoindetifier;

Commoindetifier ::= COMMA IDENTIFIER Commoindetifier | ;

Type ::= INTEGER | DECIMAL;

Stmtlist ::= Stmt SemiColonstmt;

SemiColonstmt ::= SEMICOLON Stmt SemiColonstmt | ;

Stmt ::= Assignstmt 
         | Readstmt
         | Writestmt
         | Whilestmt
         |Dowhilestmt
         | Ifstmt
         | Forstmt;

Assignstmt ::= IDENTIFIER ASSIGN_OP Simpleexpr;



Expression ::= Simpleexpr ExpTail ;



ExpTail ::= Relop Simpleexpr
          | Shiftop Simpleexpr
          | ;



Simpleexpr ::= Term 
              | Simpleexpr Addop Term
              | RIGHT_PAREN Expression LEFT_PAREN QUESTION_MARK Simpleexpr COLON Simpleexpr;

Writable ::= Simpleexpr | Literal;

Condition ::= Expression;


Ifstmt ::= IF Condition THEN  Stmtlist  IFComp;

IFComp ::= END
          | ELSE  Stmtlist END;


Term ::= FactoA | Term Mulop FactoA;

FactoA ::= Factor | NOT Factor | MINUS Factor;

Readstmt ::= READ RIGHT_PAREN IDENTIFIER LEFT_PAREN;

Writestmt ::= WRITE RIGHT_PAREN Writable LEFT_PAREN ;




Factor ::= IDENTIFIER | INTEGERCONSTANT | DECIMALCONSTANT | RIGHT_PAREN Expression LEFT_PAREN  ;







/* Loops */

Forstmt ::= FOR Assignstmt TO Condition  DO Stmtlist  END ; 
Whilestmt ::= Stmtsuffix DO Stmtlist  END;
Stmtsuffix ::=  WHILE Condition ;
Dowhilestmt ::=  DO Stmtlist   Stmtsuffix;




Relop ::= EQ | GT | GE | LT | LE | NE;

Addop ::= PLUS | MINUS | OR;

Mulop ::= MULT | DIV | MOD | AND;

Shiftop ::= TLT
          | TGT
          | DLT
          | DGT;


Literal ::= TEXTO;