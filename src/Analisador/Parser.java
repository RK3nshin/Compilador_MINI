
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\010\004\000\002\010\002\000\002\004\004" +
    "\000\002\012\005\000\002\012\003\000\002\005\004\000" +
    "\002\006\004\000\002\011\005\000\002\011\002\000\002" +
    "\007\003\000\002\007\003\000\002\013\004\000\002\015" +
    "\005\000\002\015\002\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\016\005\000\002" +
    "\023\004\000\002\042\004\000\002\042\004\000\002\042" +
    "\002\000\002\017\003\000\002\017\005\000\002\017\011" +
    "\000\002\032\003\000\002\032\003\000\002\031\003\000" +
    "\002\040\007\000\002\041\003\000\002\041\005\000\002" +
    "\020\003\000\002\020\005\000\002\021\003\000\002\021" +
    "\004\000\002\021\004\000\002\033\006\000\002\034\006" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\005\000\002\037\011\000\002\036\006\000\002" +
    "\035\004\000\002\043\005\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\004\005\001\002\000\004\002\177\001" +
    "\002\000\004\027\006\001\002\000\006\005\007\006\ufffd" +
    "\001\002\000\006\007\160\010\163\001\002\000\004\002" +
    "\000\001\002\000\004\006\012\001\002\000\020\011\024" +
    "\014\016\016\032\020\014\021\013\022\027\027\030\001" +
    "\002\000\004\035\155\001\002\000\016\026\050\027\046" +
    "\030\042\031\044\035\041\040\040\001\002\000\012\013" +
    "\ufff0\015\ufff0\020\ufff0\034\ufff0\001\002\000\004\027\030" +
    "\001\002\000\012\013\uffee\015\uffee\020\uffee\034\uffee\001" +
    "\002\000\012\013\uffec\015\uffec\020\uffec\034\uffec\001\002" +
    "\000\012\013\uffef\015\uffef\020\uffef\034\uffef\001\002\000" +
    "\012\013\uffea\015\uffea\020\uffea\034\uffea\001\002\000\004" +
    "\016\143\001\002\000\016\026\050\027\046\030\042\031" +
    "\044\035\041\040\040\001\002\000\012\013\ufff1\015\ufff1" +
    "\020\ufff1\034\126\001\002\000\012\013\uffed\015\uffed\020" +
    "\uffed\034\uffed\001\002\000\004\035\120\001\002\000\004" +
    "\032\037\001\002\000\012\013\uffeb\015\uffeb\020\uffeb\034" +
    "\uffeb\001\002\000\020\011\024\014\016\016\032\020\014" +
    "\021\013\022\027\027\030\001\002\000\004\015\034\001" +
    "\002\000\004\002\uffff\001\002\000\004\020\014\001\002" +
    "\000\012\013\uffcd\015\uffcd\020\uffcd\034\uffcd\001\002\000" +
    "\016\026\050\027\046\030\042\031\044\035\041\040\040" +
    "\001\002\000\012\027\046\030\042\031\044\035\056\001" +
    "\002\000\016\026\050\027\046\030\042\031\044\035\041" +
    "\040\040\001\002\000\066\012\uffd3\013\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\023\uffd3\024\uffd3\025\uffd3\034\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\056\uffd3\001\002\000\066\012\uffe4\013" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\023\uffe4\024\062" +
    "\025\060\034\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\061\050\063" +
    "\051\uffe4\052\uffe4\053\uffe4\054\uffe4\056\uffe4\001\002\000" +
    "\066\012\uffd2\013\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\034\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\056" +
    "\uffd2\001\002\000\066\012\uffd9\013\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\023\uffd9\024\uffd9\025\uffd9\034\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\056\uffd9\001\002\000\066\012\uffd4\013\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\056\uffd4\001\002\000\066" +
    "\012\uffdb\013\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\034\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\056\uffdb" +
    "\001\002\000\012\027\046\030\042\031\044\035\056\001" +
    "\002\000\022\013\uffe9\015\uffe9\017\uffe9\020\uffe9\023\055" +
    "\034\uffe9\040\053\041\052\001\002\000\016\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\035\uffc6\040\uffc6\001\002\000\016" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\035\uffc5\040\uffc5\001" +
    "\002\000\016\026\050\027\046\030\042\031\044\035\056" +
    "\040\040\001\002\000\016\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\035\uffc4\040\uffc4\001\002\000\016\026\050\027\046" +
    "\030\042\031\044\035\041\040\040\001\002\000\066\012" +
    "\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\023\uffe3" +
    "\024\062\025\060\034\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\061" +
    "\050\063\051\uffe3\052\uffe3\053\uffe3\054\uffe3\056\uffe3\001" +
    "\002\000\016\026\uffc1\027\uffc1\030\uffc1\031\uffc1\035\uffc1" +
    "\040\uffc1\001\002\000\016\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\035\uffc3\040\uffc3\001\002\000\016\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\035\uffc0\040\uffc0\001\002\000\016\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\035\uffc2\040\uffc2\001\002" +
    "\000\016\026\050\027\046\030\042\031\044\035\056\040" +
    "\040\001\002\000\066\012\uffda\013\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\023\uffda\024\uffda\025\uffda\034\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053" +
    "\uffda\054\uffda\056\uffda\001\002\000\004\036\107\001\002" +
    "\000\052\012\uffe5\013\uffe5\015\uffe5\016\uffe5\020\uffe5\023" +
    "\055\034\uffe5\036\uffe5\037\073\040\053\041\052\042\103" +
    "\043\075\044\102\045\077\046\071\051\072\052\100\053" +
    "\104\054\070\001\002\000\016\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\035\uffbf\040\uffbf\001\002\000\016\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\035\uffca\040\uffca\001\002\000\016" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\035\uffbc\040\uffbc\001" +
    "\002\000\016\026\uffcc\027\uffcc\030\uffcc\031\uffcc\035\uffcc" +
    "\040\uffcc\001\002\000\016\026\050\027\046\030\042\031" +
    "\044\035\041\040\040\001\002\000\016\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\035\uffc8\040\uffc8\001\002\000\020\012" +
    "\uffe8\013\uffe8\015\uffe8\016\uffe8\020\uffe8\034\uffe8\036\uffe8" +
    "\001\002\000\016\026\uffcb\027\uffcb\030\uffcb\031\uffcb\035" +
    "\uffcb\040\uffcb\001\002\000\016\026\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\035\uffbd\040\uffbd\001\002\000\016\026\050\027" +
    "\046\030\042\031\044\035\041\040\040\001\002\000\016" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\035\uffc7\040\uffc7\001" +
    "\002\000\016\026\uffc9\027\uffc9\030\uffc9\031\uffc9\035\uffc9" +
    "\040\uffc9\001\002\000\016\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\035\uffbe\040\uffbe\001\002\000\026\012\uffe6\013\uffe6" +
    "\015\uffe6\016\uffe6\020\uffe6\023\055\034\uffe6\036\uffe6\040" +
    "\053\041\052\001\002\000\026\012\uffe7\013\uffe7\015\uffe7" +
    "\016\uffe7\020\uffe7\023\055\034\uffe7\036\uffe7\040\053\041" +
    "\052\001\002\000\066\012\uffd1\013\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\023\uffd1\024\uffd1\025\uffd1\034\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\056\uffd1\001\002\000\066\012\uffd8\013\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\034\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\054\uffd8\056\uffd8\001\002\000\004" +
    "\036\112\001\002\000\070\012\uffd1\013\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\023\uffd1\024\uffd1\025\uffd1\034\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\055\113\056\uffd1\001\002\000\016\026" +
    "\050\027\046\030\042\031\044\035\041\040\040\001\002" +
    "\000\012\023\055\040\053\041\052\056\115\001\002\000" +
    "\016\026\050\027\046\030\042\031\044\035\041\040\040" +
    "\001\002\000\056\012\uffe2\013\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\023\055\034\uffe2\036\uffe2\037\uffe2\040\053" +
    "\041\052\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\056\uffe2\001\002\000\066" +
    "\012\uffd7\013\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\056\uffd7" +
    "\001\002\000\020\026\050\027\046\030\042\031\044\035" +
    "\041\040\040\057\121\001\002\000\004\036\uffbb\001\002" +
    "\000\004\036\uffe0\001\002\000\004\036\125\001\002\000" +
    "\012\023\055\036\uffe1\040\053\041\052\001\002\000\012" +
    "\013\uffd5\015\uffd5\020\uffd5\034\uffd5\001\002\000\020\011" +
    "\024\014\016\016\032\020\014\021\013\022\027\027\030" +
    "\001\002\000\010\013\ufff3\015\ufff3\020\ufff3\001\002\000" +
    "\012\013\ufff1\015\ufff1\020\ufff1\034\126\001\002\000\010" +
    "\013\ufff2\015\ufff2\020\ufff2\001\002\000\004\012\134\001" +
    "\002\000\016\012\uffdf\013\uffdf\015\uffdf\016\uffdf\020\uffdf" +
    "\034\uffdf\001\002\000\020\011\024\014\016\016\032\020" +
    "\014\021\013\022\027\027\030\001\002\000\006\013\136" +
    "\015\140\001\002\000\020\011\024\014\016\016\032\020" +
    "\014\021\013\022\027\027\030\001\002\000\012\013\uffde" +
    "\015\uffde\020\uffde\034\uffde\001\002\000\012\013\uffdd\015" +
    "\uffdd\020\uffdd\034\uffdd\001\002\000\004\015\142\001\002" +
    "\000\012\013\uffdc\015\uffdc\020\uffdc\034\uffdc\001\002\000" +
    "\020\011\024\014\016\016\032\020\014\021\013\022\027" +
    "\027\030\001\002\000\004\015\145\001\002\000\012\013" +
    "\uffcf\015\uffcf\020\uffcf\034\uffcf\001\002\000\004\017\147" +
    "\001\002\000\016\026\050\027\046\030\042\031\044\035" +
    "\041\040\040\001\002\000\004\016\151\001\002\000\020" +
    "\011\024\014\016\016\032\020\014\021\013\022\027\027" +
    "\030\001\002\000\004\015\153\001\002\000\012\013\uffd0" +
    "\015\uffd0\020\uffd0\034\uffd0\001\002\000\014\013\uffce\015" +
    "\uffce\016\uffce\020\uffce\034\uffce\001\002\000\004\027\156" +
    "\001\002\000\004\036\157\001\002\000\012\013\uffd6\015" +
    "\uffd6\020\uffd6\034\uffd6\001\002\000\004\027\ufff5\001\002" +
    "\000\004\006\ufffe\001\002\000\004\027\171\001\002\000" +
    "\004\027\ufff4\001\002\000\004\034\165\001\002\000\010" +
    "\006\ufffa\007\160\010\163\001\002\000\004\006\ufffc\001" +
    "\002\000\004\034\165\001\002\000\004\006\ufffb\001\002" +
    "\000\006\033\173\034\ufff6\001\002\000\004\034\ufff9\001" +
    "\002\000\004\027\175\001\002\000\004\034\ufff8\001\002" +
    "\000\006\033\173\034\ufff6\001\002\000\004\034\ufff7\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\007\010\010\001\001\000\010" +
    "\004\160\005\163\007\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\013\032\014\024\016\014\033\020" +
    "\034\016\035\022\036\025\037\021\040\030\043\017\001" +
    "\001\000\002\001\001\000\016\017\066\020\042\021\046" +
    "\022\044\023\132\031\153\001\001\000\002\001\001\000" +
    "\004\016\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\066\020\042\021\046\022\044\023\132\031\131" +
    "\001\001\000\004\015\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\013\034\014\024\016\014\033\020\034\016\035\022\036" +
    "\025\037\021\040\030\043\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\035\001\001\000\002\001" +
    "\001\000\012\017\050\020\042\021\046\022\044\001\001" +
    "\000\004\022\116\001\001\000\014\017\066\020\042\021" +
    "\046\022\044\023\110\001\001\000\002\001\001\000\004" +
    "\026\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\107\001\001" +
    "\000\004\025\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\056\021\046\022\044\001\001\000\002" +
    "\001\001\000\014\017\066\020\042\021\046\022\044\023" +
    "\065\001\001\000\004\026\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\064\022\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\073\025\053\027\100\042\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\105\020\042\021\046\022" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\104\020\042\021" +
    "\046\022\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\053\001\001\000\004\025" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\113\020\042\021" +
    "\046\022\044\001\001\000\004\025\053\001\001\000\012" +
    "\017\115\020\042\021\046\022\044\001\001\000\004\025" +
    "\053\001\001\000\002\001\001\000\016\017\123\020\042" +
    "\021\046\022\044\030\121\032\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\053" +
    "\001\001\000\002\001\001\000\024\014\127\016\014\033" +
    "\020\034\016\035\022\036\025\037\021\040\030\043\017" +
    "\001\001\000\002\001\001\000\004\015\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\013\134\014\024\016\014\033\020\034\016\035\022\036" +
    "\025\037\021\040\030\043\017\001\001\000\004\041\136" +
    "\001\001\000\026\013\140\014\024\016\014\033\020\034" +
    "\016\035\022\036\025\037\021\040\030\043\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\013\143\014\024\016\014\033\020" +
    "\034\016\035\022\036\025\037\021\040\030\043\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\066\020\042\021\046\022\044\023\132\031" +
    "\147\001\001\000\002\001\001\000\026\013\151\014\024" +
    "\016\014\033\020\034\016\035\022\036\025\037\021\040" +
    "\030\043\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\171\001\001\000\002\001\001\000\004\012\165\001" +
    "\001\000\006\005\166\007\161\001\001\000\002\001\001" +
    "\000\004\012\167\001\001\000\002\001\001\000\004\011" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\175\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Startprogram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Startprogram ::= PROGRAM IDENTIFIER Body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Startprogram",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Body ::= Dlist BEGIN Stmtlist END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Dlist ::= DECLARE DeclList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dlist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Dlist ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dlist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclList ::= Decl Semicolondecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Semicolondecl ::= SEMICOLON Decl Semicolondecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Semicolondecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Semicolondecl ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Semicolondecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= Type IdentList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IdentList ::= IDENTIFIER Commoindetifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Commoindetifier ::= COMMA IDENTIFIER Commoindetifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Commoindetifier",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Commoindetifier ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Commoindetifier",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stmtlist ::= Stmt SemiColonstmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmtlist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SemiColonstmt ::= SEMICOLON Stmt SemiColonstmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SemiColonstmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SemiColonstmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SemiColonstmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stmt ::= Assignstmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stmt ::= Readstmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stmt ::= Writestmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmt ::= Whilestmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmt ::= Dowhilestmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= Ifstmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmt ::= Forstmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Assignstmt ::= IDENTIFIER ASSIGN_OP Simpleexpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignstmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expression ::= Simpleexpr ExpTail 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ExpTail ::= Relop Simpleexpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpTail",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExpTail ::= Shiftop Simpleexpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpTail",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ExpTail ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpTail",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Simpleexpr ::= Term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simpleexpr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Simpleexpr ::= Simpleexpr Addop Term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simpleexpr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Simpleexpr ::= RIGHT_PAREN Expression LEFT_PAREN QUESTION_MARK Simpleexpr COLON Simpleexpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simpleexpr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Writable ::= Simpleexpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Writable",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Writable ::= Literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Writable",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Condition ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ifstmt ::= IF Condition THEN Stmtlist IFComp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ifstmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IFComp ::= END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFComp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IFComp ::= ELSE Stmtlist END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFComp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Term ::= FactoA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Term ::= Term Mulop FactoA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FactoA ::= Factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FactoA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FactoA ::= NOT Factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FactoA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FactoA ::= MINUS Factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FactoA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Readstmt ::= READ RIGHT_PAREN IDENTIFIER LEFT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Readstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Writestmt ::= WRITE RIGHT_PAREN Writable LEFT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Writestmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Factor ::= INTEGERCONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Factor ::= DECIMALCONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Factor ::= RIGHT_PAREN Expression LEFT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Forstmt ::= FOR Assignstmt TO Condition DO Stmtlist END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Forstmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Whilestmt ::= Stmtsuffix DO Stmtlist END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Whilestmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stmtsuffix ::= WHILE Condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmtsuffix",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Dowhilestmt ::= DO Stmtlist Stmtsuffix 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dowhilestmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Relop ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Relop ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Relop ::= GE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Relop ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Relop ::= LE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Relop ::= NE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Addop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Addop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Addop ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Addop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Mulop ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mulop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mulop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mulop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Mulop ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mulop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Shiftop ::= TLT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Shiftop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Shiftop ::= TGT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Shiftop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Shiftop ::= DLT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Shiftop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Shiftop ::= DGT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Shiftop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Literal ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
