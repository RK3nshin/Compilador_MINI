/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.Symbol;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.jflex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\7\1\0\1\0\1\1\22\0\1\1\1\0\1\5"+
    "\2\0\1\6\2\0\1\35\1\34\1\43\1\37\1\33\1\40\1\4"+
    "\1\44\12\3\1\46\1\32\1\42\1\36\1\41\1\45\1\0\32\2"+
    "\5\0\1\47\1\14\1\22\1\20\1\16\1\17\1\26\1\13\1\27"+
    "\1\23\2\2\1\21\1\15\1\24\1\12\1\10\1\2\1\11\1\30"+
    "\1\25\2\2\1\31\3\2\1\0\1\1\10\0\1\0\56\0\1\50"+
    "\u1f73\0\1\0\1\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\3"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\2\1\1\0\1\24"+
    "\1\25\1\24\2\3\1\26\2\3\1\27\5\3\1\30"+
    "\1\3\1\31\4\3\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\2\3\1\43\1\44\2\3"+
    "\1\45\2\3\1\46\1\3\1\47\2\3\1\50\1\51"+
    "\1\3\1\52\2\3\1\53\2\3\1\54\5\3\1\55"+
    "\1\3\1\56\1\57\4\3\1\60\1\61\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\51\0\122\0\173\0\51\0\244\0\315"+
    "\0\366\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\51\0\51\0\51\0\51"+
    "\0\51\0\51\0\51\0\u02e2\0\u030b\0\51\0\51\0\51"+
    "\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\244\0\u042a"+
    "\0\u0453\0\122\0\u047c\0\u04a5\0\122\0\u04ce\0\u04f7\0\u0520"+
    "\0\u0549\0\u0572\0\122\0\u059b\0\122\0\u05c4\0\u05ed\0\u0616"+
    "\0\u063f\0\51\0\u0668\0\51\0\51\0\u0691\0\51\0\51"+
    "\0\51\0\u03af\0\u06ba\0\u06e3\0\122\0\122\0\u070c\0\u0735"+
    "\0\122\0\u075e\0\u0787\0\122\0\u07b0\0\122\0\u07d9\0\u0802"+
    "\0\51\0\51\0\u082b\0\122\0\u0854\0\u087d\0\122\0\u08a6"+
    "\0\u08cf\0\122\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c\0\122"+
    "\0\u09c5\0\122\0\122\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\122"+
    "\0\122\0\122\0\122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\3"+
    "\1\10\1\11\1\12\1\4\1\13\1\14\1\15\1\16"+
    "\2\4\1\17\1\20\1\21\1\22\1\23\2\4\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\53\0"+
    "\2\4\4\0\22\4\22\0\1\5\1\44\46\0\1\45"+
    "\1\46\3\0\1\47\22\45\21\0\2\4\4\0\1\4"+
    "\1\50\20\4\21\0\2\4\4\0\7\4\1\51\12\4"+
    "\21\0\2\4\4\0\1\4\1\52\20\4\21\0\2\4"+
    "\4\0\14\4\1\53\5\4\21\0\2\4\4\0\2\4"+
    "\1\54\17\4\21\0\2\4\4\0\2\4\1\55\4\4"+
    "\1\56\12\4\21\0\2\4\4\0\11\4\1\57\2\4"+
    "\1\60\5\4\21\0\2\4\4\0\7\4\1\61\12\4"+
    "\21\0\2\4\4\0\14\4\1\62\1\4\1\63\3\4"+
    "\21\0\2\4\4\0\2\4\1\64\17\4\21\0\2\4"+
    "\4\0\2\4\1\65\14\4\1\66\2\4\21\0\2\4"+
    "\4\0\2\4\1\67\17\4\21\0\2\4\4\0\1\4"+
    "\1\70\15\4\1\71\2\4\55\0\1\72\2\0\1\73"+
    "\45\0\1\74\2\0\1\75\1\76\44\0\1\77\61\0"+
    "\1\100\51\0\1\101\3\0\1\102\47\0\1\45\5\0"+
    "\22\45\22\0\1\46\47\0\2\4\4\0\2\4\1\103"+
    "\17\4\21\0\2\4\4\0\4\4\1\104\15\4\21\0"+
    "\2\4\4\0\6\4\1\105\13\4\21\0\2\4\4\0"+
    "\6\4\1\106\13\4\21\0\2\4\4\0\10\4\1\107"+
    "\11\4\21\0\2\4\4\0\20\4\1\110\1\4\21\0"+
    "\2\4\4\0\6\4\1\111\13\4\21\0\2\4\4\0"+
    "\3\4\1\112\16\4\21\0\2\4\4\0\15\4\1\113"+
    "\4\4\21\0\2\4\4\0\15\4\1\114\4\4\21\0"+
    "\2\4\4\0\7\4\1\115\12\4\21\0\2\4\4\0"+
    "\1\4\1\116\20\4\21\0\2\4\4\0\13\4\1\117"+
    "\6\4\21\0\2\4\4\0\13\4\1\120\6\4\60\0"+
    "\1\121\51\0\1\122\10\0\2\4\4\0\3\4\1\123"+
    "\16\4\21\0\2\4\4\0\6\4\1\124\13\4\21\0"+
    "\2\4\4\0\11\4\1\125\1\4\1\126\6\4\21\0"+
    "\2\4\4\0\7\4\1\127\12\4\21\0\2\4\4\0"+
    "\13\4\1\130\6\4\21\0\2\4\4\0\7\4\1\131"+
    "\12\4\21\0\2\4\4\0\14\4\1\132\5\4\21\0"+
    "\2\4\4\0\15\4\1\133\4\4\21\0\2\4\4\0"+
    "\11\4\1\134\10\4\21\0\2\4\4\0\1\4\1\135"+
    "\20\4\21\0\2\4\4\0\4\4\1\136\15\4\21\0"+
    "\2\4\4\0\5\4\1\137\14\4\21\0\2\4\4\0"+
    "\14\4\1\140\5\4\21\0\2\4\4\0\3\4\1\141"+
    "\16\4\21\0\2\4\4\0\7\4\1\142\12\4\21\0"+
    "\2\4\4\0\7\4\1\143\12\4\21\0\2\4\4\0"+
    "\4\4\1\144\15\4\21\0\2\4\4\0\1\4\1\145"+
    "\20\4\21\0\2\4\4\0\4\4\1\146\15\4\21\0"+
    "\2\4\4\0\7\4\1\147\12\4\21\0\2\4\4\0"+
    "\5\4\1\150\14\4\21\0\2\4\4\0\7\4\1\151"+
    "\12\4\21\0\2\4\4\0\11\4\1\152\10\4\21\0"+
    "\2\4\4\0\1\4\1\153\20\4\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2706];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\16\1\7\11\2\1\3\11"+
    "\3\1\1\0\25\1\1\11\1\1\2\11\1\1\3\11"+
    "\17\1\2\11\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

    
     TabelaSimbolos tabelaSimbolos = new TabelaSimbolos();

     public Yylex(String filePath,  TabelaSimbolos symbolTable) throws IOException {
        this.zzReader = new BufferedReader(new FileReader(filePath));
        this.tabelaSimbolos = symbolTable;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: <<EOF>>");
              System.out.println("action [392] { tabelaSimbolos.imprimirTabela();"+ZZ_NL+"    System.exit(0); }");
              tabelaSimbolos.imprimirTabela();
    System.exit(0);
            }  // fall though
            case 108: break;
            default:
          { return new java_cup.runtime.Symbol(Sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [377] { Yytoken token = new Yytoken(Sym.CARACTERE, yytext(), yyline, yychar, yychar + yylength(), \"Caractere\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.CARACTERE, yytext(), yyline, yychar, yychar + yylength(), "Caractere");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 52: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [349] { // Ignorar espaços em branco e quebras de linha }");
            { // Ignorar espaços em branco e quebras de linha
            } 
            // fall through
          case 53: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [342] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), \"Identifier\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 54: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [356] { Yytoken token = new Yytoken(Sym.INTEGERCONSTANT, yytext(), yyline, yychar, yychar + yylength(), \"Interger\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.INTEGERCONSTANT, yytext(), yyline, yychar, yychar + yylength(), "Interger");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 55: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [383] { System.out.println(\"Illegal character: <\" + yytext() + \">\" + \"line\" + yyline);"+ZZ_NL+"    Yytoken token = new Yytoken(Sym.error, yytext(), yyline, yychar, yychar + yylength(), \"Caractere\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { System.out.println("Illegal character: <" + yytext() + ">" + "line" + yyline);
    Yytoken token = new Yytoken(Sym.error, yytext(), yyline, yychar, yychar + yylength(), "Caractere");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 56: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { Yytoken token = new Yytoken(Sym.MOD, yytext(), yyline, yychar, yychar + 3, \"Modulo\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.MOD, yytext(), yyline, yychar, yychar + 3, "Modulo");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 57: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [180] { Yytoken token = new Yytoken(Sym.SEMICOLON, yytext(), yyline, yychar, yychar + 1, \"Semicolon\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.SEMICOLON, yytext(), yyline, yychar, yychar + 1, "Semicolon");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 58: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [186] { Yytoken token = new Yytoken(Sym.COMMA, yytext(), yyline, yychar, yychar + 1, \"Comma\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.COMMA, yytext(), yyline, yychar, yychar + 1, "Comma");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 59: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [193] { Yytoken token = new Yytoken(Sym.RIGHT_PAREN, yytext(), yyline, yychar, yychar + 1, \"Right Parenthesis\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.RIGHT_PAREN, yytext(), yyline, yychar, yychar + 1, "Right Parenthesis");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 60: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [200] { Yytoken token = new Yytoken(Sym.LEFT_PAREN, yytext(), yyline, yychar, yychar + 1, \"Left Parenthesis\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.LEFT_PAREN, yytext(), yyline, yychar, yychar + 1, "Left Parenthesis");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 61: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [209] { Yytoken token = new Yytoken(Sym.EQ, yytext(), yyline, yychar, yychar + 1, \"EQ\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.EQ, yytext(), yyline, yychar, yychar + 1, "EQ");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 62: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [215] { Yytoken token = new Yytoken(Sym.PLUS, yytext(), yyline, yychar, yychar + 1, \"Plus\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.PLUS, yytext(), yyline, yychar, yychar + 1, "Plus");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 63: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [222] { Yytoken token = new Yytoken(Sym.MINUS, yytext(), yyline, yychar, yychar + 1, \"Minus\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.MINUS, yytext(), yyline, yychar, yychar + 1, "Minus");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 64: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { Yytoken token = new Yytoken(Sym.GT, yytext(), yyline, yychar, yychar + 1, \"GT\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.GT, yytext(), yyline, yychar, yychar + 1, "GT");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 65: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [243] { Yytoken token = new Yytoken(Sym.LT, yytext(), yyline, yychar, yychar + 1, \"LT\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.LT, yytext(), yyline, yychar, yychar + 1, "LT");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 66: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [292] { Yytoken token = new Yytoken(Sym.MULT, yytext(), yyline, yychar, yychar + 1, \"Mult\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.MULT, yytext(), yyline, yychar, yychar + 1, "Mult");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 67: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [299] { Yytoken token = new Yytoken(Sym.DIV, yytext(), yyline, yychar, yychar + 1, \"Div\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.DIV, yytext(), yyline, yychar, yychar + 1, "Div");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 68: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [306] { Yytoken token = new Yytoken(Sym.QUESTION_MARK, yytext(), yyline, yychar, yychar + 1, \"Question Mark\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.QUESTION_MARK, yytext(), yyline, yychar, yychar + 1, "Question Mark");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 69: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [313] { Yytoken token = new Yytoken(Sym.COLON, yytext(), yyline, yychar, yychar + 1, \"Colon\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.COLON, yytext(), yyline, yychar, yychar + 1, "Colon");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 70: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [352] { // Ignorar comentarios }");
            { // Ignorar comentarios
            } 
            // fall through
          case 71: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [370] { Yytoken token = new Yytoken(Sym.MOD, yytext(), yyline, yychar, yychar + yylength(), \"Decimal\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.MOD, yytext(), yyline, yychar, yychar + yylength(), "Decimal");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 72: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { Yytoken token = new Yytoken(Sym.OR, yytext(), yyline, yychar, yychar + 2, \"Palavra reservada: or\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.OR, yytext(), yyline, yychar, yychar + 2, "Palavra reservada: or");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 73: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [109] { Yytoken token = new Yytoken(Sym.DO, yytext(), yyline, yychar, yychar + 2, \"Palavra reservada: do\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.DO, yytext(), yyline, yychar, yychar + 2, "Palavra reservada: do");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 74: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { Yytoken token = new Yytoken(Sym.IF, yytext(), yyline, yychar, yychar + 2, \"Palavra reservada: if\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.IF, yytext(), yyline, yychar, yychar + 2, "Palavra reservada: if");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 75: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { Yytoken token = new Yytoken(Sym.TO, yytext(), yyline, yychar, yychar + 2, \"Palavra reservada: to\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.TO, yytext(), yyline, yychar, yychar + 2, "Palavra reservada: to");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 76: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [236] { Yytoken token = new Yytoken(Sym.GE, yytext(), yyline, yychar, yychar + 2, \"GE\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.GE, yytext(), yyline, yychar, yychar + 2, "GE");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 77: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [271] { Yytoken token = new Yytoken(Sym.DGT, yytext(), yyline, yychar, yychar + 2, \"DGT\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.DGT, yytext(), yyline, yychar, yychar + 2, "DGT");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 78: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [250] { Yytoken token = new Yytoken(Sym.LE, yytext(), yyline, yychar, yychar + 2, \"LE\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.LE, yytext(), yyline, yychar, yychar + 2, "LE");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 79: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [257] { Yytoken token = new Yytoken(Sym.NE, yytext(), yyline, yychar, yychar + 2, \"NE\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.NE, yytext(), yyline, yychar, yychar + 2, "NE");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 80: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [264] { Yytoken token = new Yytoken(Sym.DLT, yytext(), yyline, yychar, yychar + 2, \"DLT\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.DLT, yytext(), yyline, yychar, yychar + 2, "DLT");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 81: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [333] { Yytoken token = new Yytoken(Sym.ASSIGN_OP, yytext(), yyline, yychar, yychar + 2, \"ASSIGN_OP\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.ASSIGN_OP, yytext(), yyline, yychar, yychar + 2, "ASSIGN_OP");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 82: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [319] { Yytoken token = new Yytoken(Sym.BACKTICK, yytext(), yyline, yychar, yychar + 1, \"Backtick\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.BACKTICK, yytext(), yyline, yychar, yychar + 1, "Backtick");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 83: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [326] { Yytoken token = new Yytoken(Sym.ACUTE_ACCENT, yytext(), yyline, yychar, yychar + 1, \"Acute Accent\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.ACUTE_ACCENT, yytext(), yyline, yychar, yychar + 1, "Acute Accent");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 84: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [363] { Yytoken token = new Yytoken(Sym.DECIMALCONSTANT, yytext(), yyline, yychar, yychar + yylength(), \"Decimal\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.DECIMALCONSTANT, yytext(), yyline, yychar, yychar + yylength(), "Decimal");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 85: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [151] { Yytoken token = new Yytoken(Sym.AND, yytext(), yyline, yychar, yychar + 3, \"Palavra reservada: and\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.AND, yytext(), yyline, yychar, yychar + 3, "Palavra reservada: and");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 86: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [158] { Yytoken token = new Yytoken(Sym.MOD, yytext(), yyline, yychar, yychar + 3, \"Palavra reservada: mod\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.MOD, yytext(), yyline, yychar, yychar + 3, "Palavra reservada: mod");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 87: break;
          case 37: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { Yytoken token = new Yytoken(Sym.END, yytext(), yyline, yychar, yychar + 3, \"Palavra reservada: end\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.END, yytext(), yyline, yychar, yychar + 3, "Palavra reservada: end");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 88: break;
          case 38: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { Yytoken token = new Yytoken(Sym.NOT, yytext(), yyline, yychar, yychar + 3, \"Palavra reservada: not\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.NOT, yytext(), yyline, yychar, yychar + 3, "Palavra reservada: not");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 89: break;
          case 39: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { Yytoken token = new Yytoken(Sym.FOR, yytext(), yyline, yychar, yychar + 3, \"Palavra reservada: for\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.FOR, yytext(), yyline, yychar, yychar + 3, "Palavra reservada: for");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 90: break;
          case 40: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [285] { Yytoken token = new Yytoken(Sym.TGT, yytext(), yyline, yychar, yychar + 3, \"TGT\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.TGT, yytext(), yyline, yychar, yychar + 3, "TGT");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 91: break;
          case 41: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [278] { Yytoken token = new Yytoken(Sym.TLT, yytext(), yyline, yychar, yychar + 3, \"TLT\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.TLT, yytext(), yyline, yychar, yychar + 3, "TLT");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 92: break;
          case 42: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { Yytoken token = new Yytoken(Sym.READ, yytext(), yyline, yychar, yychar + 4, \"Palavra reservada: read\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.READ, yytext(), yyline, yychar, yychar + 4, "Palavra reservada: read");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 93: break;
          case 43: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { Yytoken token = new Yytoken(Sym.ELSE, yytext(), yyline, yychar, yychar + 4, \"Palavra reservada: else\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.ELSE, yytext(), yyline, yychar, yychar + 4, "Palavra reservada: else");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 94: break;
          case 44: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { Yytoken token = new Yytoken(Sym.THEN, yytext(), yyline, yychar, yychar + 4, \"Palavra reservada: then\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.THEN, yytext(), yyline, yychar, yychar + 4, "Palavra reservada: then");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 95: break;
          case 45: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [55] { Yytoken token = new Yytoken(Sym.BEGIN, yytext(), yyline, yychar, yychar + 5, \"Palavra reservada: begin\");"+ZZ_NL+"    tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.BEGIN, yytext(), yyline, yychar, yychar + 5, "Palavra reservada: begin");
    tabelaSimbolos.adicionarEntrada(token);
    return token;
            } 
            // fall through
          case 96: break;
          case 46: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { Yytoken token = new Yytoken(Sym.WRITE, yytext(), yyline, yychar, yychar + 5, \"Palavra reservada: write\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.WRITE, yytext(), yyline, yychar, yychar + 5, "Palavra reservada: write");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 97: break;
          case 47: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { Yytoken token = new Yytoken(Sym.WHILE, yytext(), yyline, yychar, yychar + 5, \"Palavra reservada: while\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.WHILE, yytext(), yyline, yychar, yychar + 5, "Palavra reservada: while");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 98: break;
          case 48: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [43] { Yytoken token = new Yytoken(Sym.PROGRAM, yytext(), yyline, yychar, yychar + 7, \"Palavra reservada: program\");"+ZZ_NL+"    tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.PROGRAM, yytext(), yyline, yychar, yychar + 7, "Palavra reservada: program");
    tabelaSimbolos.adicionarEntrada(token);
    return token;
            } 
            // fall through
          case 99: break;
          case 49: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [49] { Yytoken token = new Yytoken(Sym.DECLARE, yytext(), yyline, yychar, yychar + 7, \"Palavra reservada: declare\");"+ZZ_NL+"    tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.DECLARE, yytext(), yyline, yychar, yychar + 7, "Palavra reservada: declare");
    tabelaSimbolos.adicionarEntrada(token);
    return token;
            } 
            // fall through
          case 100: break;
          case 50: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [67] { Yytoken token = new Yytoken(Sym.DECIMAL, yytext(), yyline, yychar, yychar + 7, \"Palavra reservada: decimal\");"+ZZ_NL+"        tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+""+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.DECIMAL, yytext(), yyline, yychar, yychar + 7, "Palavra reservada: decimal");
        tabelaSimbolos.adicionarEntrada(token);

    return token;
            } 
            // fall through
          case 101: break;
          case 51: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [61] { Yytoken token = new Yytoken(Sym.INTEGER, yytext(), yyline, yychar, yychar + 7, \"Palavra reservada: integer\");"+ZZ_NL+"    tabelaSimbolos.adicionarEntrada(token);"+ZZ_NL+"    return token; }");
            { Yytoken token = new Yytoken(Sym.INTEGER, yytext(), yyline, yychar, yychar + 7, "Palavra reservada: integer");
    tabelaSimbolos.adicionarEntrada(token);
    return token;
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
