Stmt ::= Assignstmt 
         | Readstmt
         | Writestmt
         | Whilestmt
         | Ifstmt;

Assignstmt ::= IDENTIFIER ASSIGN_OP Simpleexp;


Simpleexp ::= Term 
              | Simpleexp Addop Term
              | ConditionalExpression QUESTION_MARK Simpleexp COLON Simpleexp;



Term ::= FactoA | Term Mulop FactoA;

FactoA ::= Factor | NOT Factor | MINUS Factor;

Readstmt ::= READ RIGHT_PAREN IDENTIFIER LEFT_PAREN SEMICOLON;

Writestmt ::= WRITE RIGHT_PAREN Writable LEFT_PAREN SEMICOLON;

Ifstmt ::= IF Condition THEN  Stmtlist  IFComp;

IFComp ::= END
          | ELSE  Stmtlist END;


Factor ::= IDENTIFIER | INTEGERCONSTANT | DECIMALCONSTANT | RIGHT_PAREN Expression LEFT_PAREN | ConditionalExpression  ;

Expression ::= Simpleexp Relop Simpleexp; 


ConditionalExpression ::= RIGHT_PAREN Simpleexp LEFT_PAREN;

Writable ::= Simpleexp | Literal;

Condition ::= Expression;

/* Loops */

Forstmt ::= FOR Assignstmt TO Condition  Loopcomplemeto;

Whilestmt ::= Whilecondition Loopcomplemeto;

Dowhilestmt ::= Dostmtlist  Stmtsuffix;

Loopcomplemeto ::=   Dostmtlist END;

Dostmtlist ::= DO Stmtlist;

Stmtsuffix ::=  Whilecondition SEMICOLON;

Whilecondition ::= WHILE Condition;