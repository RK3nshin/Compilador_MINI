line: 1 char: 0 match: --program--
action [40] { Yytoken token = new Yytoken(Sym.PROGRAM, yytext(), yyline, yychar, yychar + 7, "Palavra reservada: program");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: program
Index: 0
Name: Palavra reservada: program
Line: 0
Begin: 0
End: 7
line: 1 char: 7 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 1 char: 8 match: --teste6--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: teste6
Index: 0
Name: Identifier
Line: 0
Begin: 8
End: 14
line: 1 char: 14 match: --\u000A--
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 2 char: 15 match: --declare--
action [48] { Yytoken token = new Yytoken(Sym.DECLARE, yytext(), yyline, yychar, yychar + 7, "Palavra reservada: declare");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: declare
Index: 0
Name: Palavra reservada: declare
Line: 1
Begin: 15
End: 22
line: 2 char: 22 match: --\u000A--
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 3 char: 23 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 3 char: 24 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 3 char: 25 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 3 char: 26 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 3 char: 27 match: --integer--
action [64] { Yytoken token = new Yytoken(Sym.INTEGER, yytext(), yyline, yychar, yychar + 7, "Palavra reservada: integer");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: integer
Index: 0
Name: Palavra reservada: integer
Line: 2
Begin: 27
End: 34
line: 3 char: 34 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 3 char: 35 match: --a--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: a
Index: 0
Name: Identifier
Line: 2
Begin: 35
End: 36
line: 3 char: 36 match: --,--
action [204] { Yytoken token = new Yytoken(Sym.COMMA, yytext(), yyline, yychar, yychar + 1, "Comma");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: ,
Index: 0
Name: Comma
Line: 2
Begin: 36
End: 37
line: 3 char: 37 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 3 char: 38 match: --b--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: b
Index: 0
Name: Identifier
Line: 2
Begin: 38
End: 39
line: 3 char: 39 match: --,--
action [204] { Yytoken token = new Yytoken(Sym.COMMA, yytext(), yyline, yychar, yychar + 1, "Comma");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: ,
Index: 0
Name: Comma
Line: 2
Begin: 39
End: 40
line: 3 char: 40 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 3 char: 41 match: --c--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: c
Index: 0
Name: Identifier
Line: 2
Begin: 41
End: 42
line: 3 char: 42 match: --,--
action [204] { Yytoken token = new Yytoken(Sym.COMMA, yytext(), yyline, yychar, yychar + 1, "Comma");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: ,
Index: 0
Name: Comma
Line: 2
Begin: 42
End: 43
line: 3 char: 43 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 3 char: 44 match: --maior--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: maior
Index: 0
Name: Identifier
Line: 2
Begin: 44
End: 49
line: 3 char: 49 match: --;--
action [197] { Yytoken token = new Yytoken(Sym.SEMICOLON, yytext(), yyline, yychar, yychar + 1, "Semicolon");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: ;
Index: 0
Name: Semicolon
Line: 2
Begin: 49
End: 50
line: 3 char: 50 match: --\u000A--
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 4 char: 51 match: --begin--
action [56] { Yytoken token = new Yytoken(Sym.BEGIN, yytext(), yyline, yychar, yychar + 5, "Palavra reservada: begin");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: begin
Index: 0
Name: Palavra reservada: begin
Line: 3
Begin: 51
End: 56
line: 4 char: 56 match: --\u000A--
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 5 char: 57 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 5 char: 58 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 5 char: 59 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 5 char: 60 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 5 char: 61 match: --read--
action [144] { Yytoken token = new Yytoken(Sym.READ, yytext(), yyline, yychar, yychar + 4, "Palavra reservada: read");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: read
Index: 0
Name: Palavra reservada: read
Line: 4
Begin: 61
End: 65
line: 5 char: 65 match: --(--
action [220] { Yytoken token = new Yytoken(Sym.LEFT_PAREN, yytext(), yyline, yychar, yychar + 1, "Left Parenthesis");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: (
Index: 0
Name: Left Parenthesis
Line: 4
Begin: 65
End: 66
line: 5 char: 66 match: --a--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: a
Index: 0
Name: Identifier
Line: 4
Begin: 66
End: 67
line: 5 char: 67 match: --)--
action [212] { Yytoken token = new Yytoken(Sym.RIGHT_PAREN, yytext(), yyline, yychar, yychar + 1, "Right Parenthesis");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: )
Index: 0
Name: Right Parenthesis
Line: 4
Begin: 67
End: 68
line: 5 char: 68 match: --;--
action [197] { Yytoken token = new Yytoken(Sym.SEMICOLON, yytext(), yyline, yychar, yychar + 1, "Semicolon");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: ;
Index: 0
Name: Semicolon
Line: 4
Begin: 68
End: 69
line: 5 char: 69 match: --\u000A--
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 6 char: 70 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 6 char: 71 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 6 char: 72 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 6 char: 73 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 6 char: 74 match: --read--
action [144] { Yytoken token = new Yytoken(Sym.READ, yytext(), yyline, yychar, yychar + 4, "Palavra reservada: read");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: read
Index: 0
Name: Palavra reservada: read
Line: 5
Begin: 74
End: 78
line: 6 char: 78 match: --(--
action [220] { Yytoken token = new Yytoken(Sym.LEFT_PAREN, yytext(), yyline, yychar, yychar + 1, "Left Parenthesis");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: (
Index: 0
Name: Left Parenthesis
Line: 5
Begin: 78
End: 79
line: 6 char: 79 match: --b--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: b
Index: 0
Name: Identifier
Line: 5
Begin: 79
End: 80
line: 6 char: 80 match: --)--
action [212] { Yytoken token = new Yytoken(Sym.RIGHT_PAREN, yytext(), yyline, yychar, yychar + 1, "Right Parenthesis");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: )
Index: 0
Name: Right Parenthesis
Line: 5
Begin: 80
End: 81
line: 6 char: 81 match: --;--
action [197] { Yytoken token = new Yytoken(Sym.SEMICOLON, yytext(), yyline, yychar, yychar + 1, "Semicolon");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: ;
Index: 0
Name: Semicolon
Line: 5
Begin: 81
End: 82
line: 6 char: 82 match: --\u000A--
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 7 char: 83 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 7 char: 84 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 7 char: 85 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 7 char: 86 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 7 char: 87 match: --read--
action [144] { Yytoken token = new Yytoken(Sym.READ, yytext(), yyline, yychar, yychar + 4, "Palavra reservada: read");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: read
Index: 0
Name: Palavra reservada: read
Line: 6
Begin: 87
End: 91
line: 7 char: 91 match: --(--
action [220] { Yytoken token = new Yytoken(Sym.LEFT_PAREN, yytext(), yyline, yychar, yychar + 1, "Left Parenthesis");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: (
Index: 0
Name: Left Parenthesis
Line: 6
Begin: 91
End: 92
line: 7 char: 92 match: --c--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: c
Index: 0
Name: Identifier
Line: 6
Begin: 92
End: 93
line: 7 char: 93 match: --)--
action [212] { Yytoken token = new Yytoken(Sym.RIGHT_PAREN, yytext(), yyline, yychar, yychar + 1, "Right Parenthesis");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: )
Index: 0
Name: Right Parenthesis
Line: 6
Begin: 93
End: 94
line: 7 char: 94 match: --;--
action [197] { Yytoken token = new Yytoken(Sym.SEMICOLON, yytext(), yyline, yychar, yychar + 1, "Semicolon");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: ;
Index: 0
Name: Semicolon
Line: 6
Begin: 94
End: 95
line: 7 char: 95 match: --\u000A--
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 8 char: 96 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 8 char: 97 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 8 char: 98 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 8 char: 99 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 8 char: 100 match: --%--
action [192] {  }
line: 8 char: 101 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 8 char: 102 match: --identifica--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: identifica
Index: 0
Name: Identifier
Line: 7
Begin: 102
End: 112
line: 8 char: 112 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 8 char: 113 match: --o--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: o
Index: 0
Name: Identifier
Line: 7
Begin: 113
End: 114
line: 8 char: 114 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 8 char: 115 match: --maior--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: maior
Index: 0
Name: Identifier
Line: 7
Begin: 115
End: 120
line: 8 char: 120 match: --\u000A--
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 9 char: 121 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 9 char: 122 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 9 char: 123 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 9 char: 124 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 9 char: 125 match: --maior--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: maior
Index: 0
Name: Identifier
Line: 8
Begin: 125
End: 130
line: 9 char: 130 match: --:=--
action [411] { Yytoken token = new Yytoken(Sym.ASSIGN_OP, yytext(), yyline, yychar, yychar + 2, "ASSIGN_OP");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: :=
Index: 0
Name: ASSIGN_OP
Line: 8
Begin: 130
End: 132
line: 9 char: 132 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 9 char: 133 match: --(--
action [220] { Yytoken token = new Yytoken(Sym.LEFT_PAREN, yytext(), yyline, yychar, yychar + 1, "Left Parenthesis");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: (
Index: 0
Name: Left Parenthesis
Line: 8
Begin: 133
End: 134
line: 9 char: 134 match: --a--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: a
Index: 0
Name: Identifier
Line: 8
Begin: 134
End: 135
line: 9 char: 135 match: -->--
action [253] { Yytoken token = new Yytoken(Sym.GT, yytext(), yyline, yychar, yychar + 1, "GT");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: >
Index: 0
Name: GT
Line: 8
Begin: 135
End: 136
line: 9 char: 136 match: --b--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: b
Index: 0
Name: Identifier
Line: 8
Begin: 136
End: 137
line: 9 char: 137 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 9 char: 138 match: --and--
action [168] { Yytoken token = new Yytoken(Sym.AND, yytext(), yyline, yychar, yychar + 3, "Palavra reservada: and");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: and
Index: 0
Name: Palavra reservada: and
Line: 8
Begin: 138
End: 141
line: 9 char: 141 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 9 char: 142 match: --a--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: a
Index: 0
Name: Identifier
Line: 8
Begin: 142
End: 143
line: 9 char: 143 match: -->--
action [253] { Yytoken token = new Yytoken(Sym.GT, yytext(), yyline, yychar, yychar + 1, "GT");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: >
Index: 0
Name: GT
Line: 8
Begin: 143
End: 144
line: 9 char: 144 match: --c--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: c
Index: 0
Name: Identifier
Line: 8
Begin: 144
End: 145
line: 9 char: 145 match: --)--
action [212] { Yytoken token = new Yytoken(Sym.RIGHT_PAREN, yytext(), yyline, yychar, yychar + 1, "Right Parenthesis");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: )
Index: 0
Name: Right Parenthesis
Line: 8
Begin: 145
End: 146
line: 9 char: 146 match: --?--
action [345] { /* Crie um token correspondente ao símbolo "?" */
    Yytoken token = new Yytoken(Sym.QUESTION_MARK, yytext(), yyline, yychar, yychar + 1, "Question Mark");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: ?
Index: 0
Name: Question Mark
Line: 8
Begin: 146
End: 147
line: 9 char: 147 match: --a--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: a
Index: 0
Name: Identifier
Line: 8
Begin: 147
End: 148
line: 9 char: 148 match: --:--
action [354] { /* Crie um token correspondente ao símbolo ":" */
    Yytoken token = new Yytoken(Sym.COLON, yytext(), yyline, yychar, yychar + 1, "Colon");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: :
Index: 0
Name: Colon
Line: 8
Begin: 148
End: 149
line: 9 char: 149 match: --(--
action [220] { Yytoken token = new Yytoken(Sym.LEFT_PAREN, yytext(), yyline, yychar, yychar + 1, "Left Parenthesis");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: (
Index: 0
Name: Left Parenthesis
Line: 8
Begin: 149
End: 150
line: 9 char: 150 match: --b--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: b
Index: 0
Name: Identifier
Line: 8
Begin: 150
End: 151
line: 9 char: 151 match: -->--
action [253] { Yytoken token = new Yytoken(Sym.GT, yytext(), yyline, yychar, yychar + 1, "GT");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: >
Index: 0
Name: GT
Line: 8
Begin: 151
End: 152
line: 9 char: 152 match: --c--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: c
Index: 0
Name: Identifier
Line: 8
Begin: 152
End: 153
line: 9 char: 153 match: --)--
action [212] { Yytoken token = new Yytoken(Sym.RIGHT_PAREN, yytext(), yyline, yychar, yychar + 1, "Right Parenthesis");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: )
Index: 0
Name: Right Parenthesis
Line: 8
Begin: 153
End: 154
line: 9 char: 154 match: --?--
action [345] { /* Crie um token correspondente ao símbolo "?" */
    Yytoken token = new Yytoken(Sym.QUESTION_MARK, yytext(), yyline, yychar, yychar + 1, "Question Mark");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: ?
Index: 0
Name: Question Mark
Line: 8
Begin: 154
End: 155
line: 9 char: 155 match: --b--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: b
Index: 0
Name: Identifier
Line: 8
Begin: 155
End: 156
line: 9 char: 156 match: --:--
action [354] { /* Crie um token correspondente ao símbolo ":" */
    Yytoken token = new Yytoken(Sym.COLON, yytext(), yyline, yychar, yychar + 1, "Colon");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: :
Index: 0
Name: Colon
Line: 8
Begin: 156
End: 157
line: 9 char: 157 match: --c--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: c
Index: 0
Name: Identifier
Line: 8
Begin: 157
End: 158
line: 9 char: 158 match: --;--
action [197] { Yytoken token = new Yytoken(Sym.SEMICOLON, yytext(), yyline, yychar, yychar + 1, "Semicolon");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: ;
Index: 0
Name: Semicolon
Line: 8
Begin: 158
End: 159
line: 9 char: 159 match: --\u000A--
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 10 char: 160 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 10 char: 161 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 10 char: 162 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 10 char: 163 match: -- --
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 10 char: 164 match: --write--
action [152] { Yytoken token = new Yytoken(Sym.WRITE, yytext(), yyline, yychar, yychar + 5, "Palavra reservada: write");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: write
Index: 0
Name: Palavra reservada: write
Line: 9
Begin: 164
End: 169
line: 10 char: 169 match: --(--
action [220] { Yytoken token = new Yytoken(Sym.LEFT_PAREN, yytext(), yyline, yychar, yychar + 1, "Left Parenthesis");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: (
Index: 0
Name: Left Parenthesis
Line: 9
Begin: 169
End: 170
line: 10 char: 170 match: --maior--
action [383] { Yytoken token = new Yytoken(Sym.IDENTIFIER, yytext(), yyline, yychar, yychar + yylength(), "Identifier");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: maior
Index: 0
Name: Identifier
Line: 9
Begin: 170
End: 175
line: 10 char: 175 match: --)--
action [212] { Yytoken token = new Yytoken(Sym.RIGHT_PAREN, yytext(), yyline, yychar, yychar + 1, "Right Parenthesis");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: )
Index: 0
Name: Right Parenthesis
Line: 9
Begin: 175
End: 176
line: 10 char: 176 match: --;--
action [197] { Yytoken token = new Yytoken(Sym.SEMICOLON, yytext(), yyline, yychar, yychar + 1, "Semicolon");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: ;
Index: 0
Name: Semicolon
Line: 9
Begin: 176
End: 177
line: 10 char: 177 match: --\u000A--
action [391] { // Ignorar espaços em branco e quebras de linha }
line: 11 char: 178 match: --end--
action [112] { Yytoken token = new Yytoken(Sym.END, yytext(), yyline, yychar, yychar + 3, "Palavra reservada: end");
    if (!tabelaSimbolos.contemToken(token)) {
        tabelaSimbolos.adicionarEntrada(token);
    }
    return token; }
lexema: end
Index: 0
Name: Palavra reservada: end
Line: 10
Begin: 178
End: 181
line: 11 char: 181 match: <<EOF>>
action [436] { tabelaSimbolos.imprimirTabela();
    System.exit(0); }
Tabela de Símbolos:
ID: 0, Lexema: program, Nome: Palavra reservada: program, Index: 0
ID: 1, Lexema: program, Nome: Palavra reservada: program, Index: 0
ID: 2, Lexema: declare, Nome: Palavra reservada: declare, Index: 1
ID: 3, Lexema: begin, Nome: Palavra reservada: begin, Index: 2
ID: 4, Lexema: integer, Nome: Palavra reservada: integer, Index: 3
ID: 5, Lexema: decimal, Nome: Palavra reservada: decimal, Index: 4
ID: 6, Lexema: if, Nome: Palavra reservada: if, Index: 5
ID: 7, Lexema: then, Nome: Palavra reservada: then, Index: 6
ID: 8, Lexema: else, Nome: Palavra reservada: else, Index: 7
ID: 9, Lexema: for, Nome: Palavra reservada: for, Index: 8
ID: 10, Lexema: end, Nome: Palavra reservada: end, Index: 9
ID: 11, Lexema: do, Nome: Palavra reservada: do, Index: 10
ID: 12, Lexema: to, Nome: Palavra reservada: to, Index: 11
ID: 13, Lexema: while, Nome: Palavra reservada: while, Index: 12
ID: 14, Lexema: read, Nome: Palavra reservada: read, Index: 13
ID: 15, Lexema: write, Nome: Palavra reservada: write, Index: 14
ID: 16, Lexema: or, Nome: Palavra reservada: or, Index: 15
ID: 17, Lexema: and, Nome: Palavra reservada: and, Index: 16
ID: 18, Lexema: mod, Nome: Palavra reservada: mod, Index: 17
ID: 19, Lexema: not, Nome: Palavra reservada: not, Index: 18
ID: 20, Lexema: program, Nome: Palavra reservada: program, Index: 0
ID: 21, Lexema: teste6, Nome: Identifier, Index: 0
ID: 22, Lexema: declare, Nome: Palavra reservada: declare, Index: 0
ID: 23, Lexema: integer, Nome: Palavra reservada: integer, Index: 0
ID: 24, Lexema: a, Nome: Identifier, Index: 0
ID: 25, Lexema: ,, Nome: Comma, Index: 0
ID: 26, Lexema: b, Nome: Identifier, Index: 0
ID: 27, Lexema: ,, Nome: Comma, Index: 0
ID: 28, Lexema: c, Nome: Identifier, Index: 0
ID: 29, Lexema: ,, Nome: Comma, Index: 0
ID: 30, Lexema: maior, Nome: Identifier, Index: 0
ID: 31, Lexema: ;, Nome: Semicolon, Index: 0
ID: 32, Lexema: begin, Nome: Palavra reservada: begin, Index: 0
ID: 33, Lexema: read, Nome: Palavra reservada: read, Index: 0
ID: 34, Lexema: (, Nome: Left Parenthesis, Index: 0
ID: 35, Lexema: a, Nome: Identifier, Index: 0
ID: 36, Lexema: ), Nome: Right Parenthesis, Index: 0
ID: 37, Lexema: ;, Nome: Semicolon, Index: 0
ID: 38, Lexema: read, Nome: Palavra reservada: read, Index: 0
ID: 39, Lexema: (, Nome: Left Parenthesis, Index: 0
ID: 40, Lexema: b, Nome: Identifier, Index: 0
ID: 41, Lexema: ), Nome: Right Parenthesis, Index: 0
ID: 42, Lexema: ;, Nome: Semicolon, Index: 0
ID: 43, Lexema: read, Nome: Palavra reservada: read, Index: 0
ID: 44, Lexema: (, Nome: Left Parenthesis, Index: 0
ID: 45, Lexema: c, Nome: Identifier, Index: 0
ID: 46, Lexema: ), Nome: Right Parenthesis, Index: 0
ID: 47, Lexema: ;, Nome: Semicolon, Index: 0
ID: 48, Lexema: identifica, Nome: Identifier, Index: 0
ID: 49, Lexema: o, Nome: Identifier, Index: 0
ID: 50, Lexema: maior, Nome: Identifier, Index: 0
ID: 51, Lexema: maior, Nome: Identifier, Index: 0
ID: 52, Lexema: :=, Nome: ASSIGN_OP, Index: 0
ID: 53, Lexema: (, Nome: Left Parenthesis, Index: 0
ID: 54, Lexema: a, Nome: Identifier, Index: 0
ID: 55, Lexema: >, Nome: GT, Index: 0
ID: 56, Lexema: b, Nome: Identifier, Index: 0
ID: 57, Lexema: and, Nome: Palavra reservada: and, Index: 0
ID: 58, Lexema: a, Nome: Identifier, Index: 0
ID: 59, Lexema: >, Nome: GT, Index: 0
ID: 60, Lexema: c, Nome: Identifier, Index: 0
ID: 61, Lexema: ), Nome: Right Parenthesis, Index: 0
ID: 62, Lexema: ?, Nome: Question Mark, Index: 0
ID: 63, Lexema: a, Nome: Identifier, Index: 0
ID: 64, Lexema: :, Nome: Colon, Index: 0
ID: 65, Lexema: (, Nome: Left Parenthesis, Index: 0
ID: 66, Lexema: b, Nome: Identifier, Index: 0
ID: 67, Lexema: >, Nome: GT, Index: 0
ID: 68, Lexema: c, Nome: Identifier, Index: 0
ID: 69, Lexema: ), Nome: Right Parenthesis, Index: 0
ID: 70, Lexema: ?, Nome: Question Mark, Index: 0
ID: 71, Lexema: b, Nome: Identifier, Index: 0
ID: 72, Lexema: :, Nome: Colon, Index: 0
ID: 73, Lexema: c, Nome: Identifier, Index: 0
ID: 74, Lexema: ;, Nome: Semicolon, Index: 0
ID: 75, Lexema: write, Nome: Palavra reservada: write, Index: 0
ID: 76, Lexema: (, Nome: Left Parenthesis, Index: 0
ID: 77, Lexema: maior, Nome: Identifier, Index: 0
ID: 78, Lexema: ), Nome: Right Parenthesis, Index: 0
ID: 79, Lexema: ;, Nome: Semicolon, Index: 0
ID: 80, Lexema: end, Nome: Palavra reservada: end, Index: 0
